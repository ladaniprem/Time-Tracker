// Code generated by the Encore v1.48.12 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-timetracker-m932.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the timetracker-m932 Encore application.
 */
export default class Client {
    public readonly attendance: attendance.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly crm: crm.ServiceClient
    public readonly files: files.ServiceClient
    public readonly notification: notification.ServiceClient
    public readonly realtime: realtime.ServiceClient
    public readonly settings: settings.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.attendance = new attendance.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.crm = new crm.ServiceClient(base)
        this.files = new files.ServiceClient(base)
        this.notification = new notification.ServiceClient(base)
        this.realtime = new realtime.ServiceClient(base)
        this.settings = new settings.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

export namespace attendance {
    export interface AttendanceRecord {
        id: number
        employeeId: number
        date: string
        inTime?: string
        outTime?: string
        lateMinutes: number
        earlyMinutes: number
        totalHours: number
        status: string
        notes?: string
        createdAt: string
        updatedAt: string
    }

    export interface AttendanceRecordWithEmployee {
        employeeName: string
        employeeCode: string
        id: number
        employeeId: number
        date: string
        inTime?: string
        outTime?: string
        lateMinutes: number
        earlyMinutes: number
        totalHours: number
        status: string
        notes?: string
        createdAt: string
        updatedAt: string
    }

    export interface CreateEmployeeRequest {
        employeeId: string
        name: string
        email: string
        phone?: string
        department?: string
        position?: string
    }

    export interface DashboardStats {
        totalEmployees: number
        presentToday: number
        lateToday: number
        absentToday: number
        averageWorkingHours: number
    }

    export interface Employee {
        id: number
        employeeId: string
        name: string
        email: string
        phone?: string
        department?: string
        position?: string
        createdAt: string
        updatedAt: string
    }

    export interface GetUserAttendanceRequest {
        employeeId: string
        date: string
    }

    export interface GetUserAttendanceResponse {
        success: boolean
        message: string
    }

    export interface ListAttendanceRequest {
        employeeId?: number
        startDate?: string
        endDate?: string
        limit?: number
        offset?: number
    }

    export interface ListAttendanceResponse {
        records: AttendanceRecordWithEmployee[]
        total: number
    }

    export interface ListEmployeesRequest {
        limit?: number
        offset?: number
        department?: string
    }

    export interface ListEmployeesResponse {
        employees: Employee[]
        total: number
    }

    export interface RecordAttendanceRequest {
        employeeId: number
        type: "in" | "out"
        timestamp?: string
        notes?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createEmployee = this.createEmployee.bind(this)
            this.getDashboardStats = this.getDashboardStats.bind(this)
            this.getUserAttendance = this.getUserAttendance.bind(this)
            this.listAttendance = this.listAttendance.bind(this)
            this.listEmployees = this.listEmployees.bind(this)
            this.processAttendanceFiles = this.processAttendanceFiles.bind(this)
            this.recordAttendance = this.recordAttendance.bind(this)
        }

        /**
         * Creates a new employee record.
         */
        public async createEmployee(params: CreateEmployeeRequest): Promise<Employee> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/employees`, JSON.stringify(params))
            return await resp.json() as Employee
        }

        /**
         * Retrieves dashboard statistics for today's attendance.
         */
        public async getDashboardStats(): Promise<DashboardStats> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/dashboard/stats`)
            return await resp.json() as DashboardStats
        }

        public async getUserAttendance(params: GetUserAttendanceRequest): Promise<GetUserAttendanceResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/attendance/user`, JSON.stringify(params))
            return await resp.json() as GetUserAttendanceResponse
        }

        /**
         * Retrieves attendance records with optional filtering and pagination.
         */
        public async listAttendance(params: ListAttendanceRequest): Promise<ListAttendanceResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                employeeId: params.employeeId === undefined ? undefined : String(params.employeeId),
                endDate:    params.endDate,
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/attendance`, undefined, {query})
            return await resp.json() as ListAttendanceResponse
        }

        /**
         * Retrieves all employees with optional filtering and pagination.
         */
        public async listEmployees(params: ListEmployeesRequest): Promise<ListEmployeesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                department: params.department,
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/employees`, undefined, {query})
            return await resp.json() as ListEmployeesResponse
        }

        /**
         * --- Main API ---
         */
        public async processAttendanceFiles(): Promise<{
    /**
     * --- Main API ---
     */
    success: boolean

    /**
     * --- Main API ---
     */
    message: string
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/attendance/process-files`)
            return await resp.json() as {
    /**
     * --- Main API ---
     */
    success: boolean

    /**
     * --- Main API ---
     */
    message: string
}
        }

        /**
         * Records attendance check-in or check-out for an employee.
         */
        public async recordAttendance(params: RecordAttendanceRequest): Promise<AttendanceRecord> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/attendance/record`, JSON.stringify(params))
            return await resp.json() as AttendanceRecord
        }
    }
}

export namespace auth {
    export interface LoginRequest {
        email: string
        password: string
    }

    export interface LoginResponse {
        success: boolean
        user?: UserProfile
        token?: string
        error?: string
    }

    export interface UpdateProfileRequest {
        firstName: string
        lastName: string
        phone?: string
        avatar?: string
        department?: string
        position?: string
    }

    export interface UserProfile {
        id: number
        username: string
        email: string
        firstName: string
        lastName: string
        phone?: string
        avatar?: string
        role: string
        department?: string
        position?: string
        createdAt: string
        updatedAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getProfile = this.getProfile.bind(this)
            this.login = this.login.bind(this)
            this.updateProfile = this.updateProfile.bind(this)
        }

        /**
         * Retrieves the current user's profile.
         */
        public async getProfile(): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/auth/profile`)
            return await resp.json() as UserProfile
        }

        /**
         * Authenticates user login credentials.
         */
        public async login(params: LoginRequest): Promise<LoginResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/login`, JSON.stringify(params))
            return await resp.json() as LoginResponse
        }

        /**
         * Updates the current user's profile.
         */
        public async updateProfile(params: UpdateProfileRequest): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/auth/profile`, JSON.stringify(params))
            return await resp.json() as UserProfile
        }
    }
}

export namespace crm {
    export interface GetCrmDataRequest {
        dataType: "employees" | "departments" | "settings"
        filters?: { [key: string]: any }
    }

    export interface GetCrmDataResponse {
        success: boolean
        data: any[]
        error?: string
    }

    export interface SyncDataRequest {
        dataType: "employees" | "attendance"
        data: any[]
    }

    export interface SyncDataResponse {
        success: boolean
        syncedCount: number
        error?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getCrmData = this.getCrmData.bind(this)
            this.syncData = this.syncData.bind(this)
        }

        /**
         * Retrieves data from external CRM system.
         */
        public async getCrmData(params: GetCrmDataRequest): Promise<GetCrmDataResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/crm/data`, JSON.stringify(params))
            return await resp.json() as GetCrmDataResponse
        }

        /**
         * Syncs data with external CRM system.
         */
        public async syncData(params: SyncDataRequest): Promise<SyncDataResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/crm/sync`, JSON.stringify(params))
            return await resp.json() as SyncDataResponse
        }
    }
}

export namespace files {
    export interface DownloadAttendanceFileRequest {
        fileName: string
    }

    export interface DownloadAttendanceFileResponse {
        success: boolean
        fileContent?: string
        contentType?: string
        error?: string
    }

    export interface ListAttendanceFilesResponse {
        success: boolean
        files: {
            name: string
            size: number
            etag: string
        }[]
        error?: string
    }

    export interface UploadAttendanceFileRequest {
        fileName: string
        fileContent: string
        fileType: string
    }

    export interface UploadAttendanceFileResponse {
        success: boolean
        fileUrl?: string
        error?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.downloadAttendanceFile = this.downloadAttendanceFile.bind(this)
            this.listAttendanceFiles = this.listAttendanceFiles.bind(this)
            this.uploadAttendanceFile = this.uploadAttendanceFile.bind(this)
        }

        /**
         * Downloads an attendance file from storage.
         */
        public async downloadAttendanceFile(params: DownloadAttendanceFileRequest): Promise<DownloadAttendanceFileResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/files/download-attendance`, JSON.stringify(params))
            return await resp.json() as DownloadAttendanceFileResponse
        }

        public async listAttendanceFiles(): Promise<ListAttendanceFilesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/files/attendance`)
            return await resp.json() as ListAttendanceFilesResponse
        }

        /**
         * Uploads attendance files to the configured folder.
         */
        public async uploadAttendanceFile(params: UploadAttendanceFileRequest): Promise<UploadAttendanceFileResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/files/upload-attendance`, JSON.stringify(params))
            return await resp.json() as UploadAttendanceFileResponse
        }
    }
}

export namespace notification {
    export interface SendEmailRequest {
        to: string
        subject: string
        body: string
        isHtml?: boolean
    }

    export interface SendEmailResponse {
        success: boolean
        error?: string
    }

    export interface SendWhatsAppRequest {
        to: string
        message: string
        templateName?: string
    }

    export interface SendWhatsAppResponse {
        success: boolean
        messageId?: string
        error?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.sendEmail = this.sendEmail.bind(this)
            this.sendWhatsApp = this.sendWhatsApp.bind(this)
        }

        public async sendEmail(params: SendEmailRequest): Promise<SendEmailResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/notifications/email`, JSON.stringify(params))
            return await resp.json() as SendEmailResponse
        }

        /**
         * Simulates sending WhatsApp message
         */
        public async sendWhatsApp(params: SendWhatsAppRequest): Promise<SendWhatsAppResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/notifications/whatsapp`, JSON.stringify(params))
            return await resp.json() as SendWhatsAppResponse
        }
    }
}

export namespace realtime {
    export interface AttendanceUpdate {
        type: "checkin" | "checkout" | "update"
        employeeId: number
        employeeName: string
        timestamp: string
        data: any
    }

    export interface AttendanceUpdate {
        type: "checkin" | "checkout" | "update"
        employeeId: number
        employeeName: string
        timestamp: string
        data: any
    }

    export interface RealtimeHandshake {
        userId: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.attendanceUpdates = this.attendanceUpdates.bind(this)
            this.broadcastAttendanceUpdate = this.broadcastAttendanceUpdate.bind(this)
        }

        /**
         * SSE endpoint for clients to subscribe to attendance updates.
         */
        public async attendanceUpdates(params: RealtimeHandshake): Promise<StreamIn<AttendanceUpdate>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                userId: params.userId,
            })

            return await this.baseClient.createStreamIn(`/realtime/attendance`, {query})
        }

        /**
         * Broadcast endpoint: send an update to all connected clients.
         */
        public async broadcastAttendanceUpdate(params: AttendanceUpdate): Promise<{
    /**
     * Broadcast endpoint: send an update to all connected clients.
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/realtime/broadcast`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * Broadcast endpoint: send an update to all connected clients.
     */
    success: boolean
}
        }
    }
}

export namespace settings {
    export interface AttendanceSettings {
        id: number
        workStartTime: string
        workEndTime: string
        lateThresholdMinutes: number
        earlyLeaveThresholdMinutes: number
        workingDaysPerWeek: number
        weekendDays: string[]
        holidayDates: string[]
        overtimeEnabled: boolean
        overtimeRate: number
        breakDurationMinutes: number
        updatedAt: string
    }

    export interface SystemSettings {
        companyName: string
        companyLogo?: string
        timezone: string
        dateFormat: string
        timeFormat: string
        currency: string
        language: string
        emailNotifications: boolean
        smsNotifications: boolean
        whatsappNotifications: boolean
        autoBackup: boolean
        backupFrequency: string
        dataRetentionDays: number
    }

    export interface UpdateAttendanceSettingsRequest {
        workStartTime: string
        workEndTime: string
        lateThresholdMinutes: number
        earlyLeaveThresholdMinutes: number
        workingDaysPerWeek: number
        weekendDays: string[]
        holidayDates: string[]
        overtimeEnabled: boolean
        overtimeRate: number
        breakDurationMinutes: number
    }

    export interface UpdateSystemSettingsRequest {
        companyName: string
        companyLogo?: string
        timezone: string
        dateFormat: string
        timeFormat: string
        currency: string
        language: string
        emailNotifications: boolean
        smsNotifications: boolean
        whatsappNotifications: boolean
        autoBackup: boolean
        backupFrequency: string
        dataRetentionDays: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getAttendanceSettings = this.getAttendanceSettings.bind(this)
            this.getSystemSettings = this.getSystemSettings.bind(this)
            this.updateAttendanceSettings = this.updateAttendanceSettings.bind(this)
            this.updateSystemSettings = this.updateSystemSettings.bind(this)
        }

        /**
         * Retrieves current attendance settings.
         */
        public async getAttendanceSettings(): Promise<AttendanceSettings> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/settings/attendance`)
            return await resp.json() as AttendanceSettings
        }

        /**
         * Retrieves current system settings.
         */
        public async getSystemSettings(): Promise<SystemSettings> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/settings/system`)
            return await resp.json() as SystemSettings
        }

        /**
         * Updates attendance settings.
         */
        public async updateAttendanceSettings(params: UpdateAttendanceSettingsRequest): Promise<AttendanceSettings> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/settings/attendance`, JSON.stringify(params))
            return await resp.json() as AttendanceSettings
        }

        /**
         * Updates system settings.
         */
        public async updateSystemSettings(params: UpdateSystemSettingsRequest): Promise<SystemSettings> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/settings/system`, JSON.stringify(params))
            return await resp.json() as SystemSettings
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "timetracker-m932-Generated-TS-Client (Encore/v1.48.12)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}


